parser for object language
in ocamlyacc
use assignment 1 & 2 
assignment1 : basic functions of union, closure etc
assignment2 : hastype functionality

## objective 
define grammar and lexical tokens

## evaluation
1. desing of syntax
2. implementation of parser

## submission
define abstract syntax as datatype in OCaml (done in types.ml and types.mli)
parser (executible ass) will give the output the AST


## structure
1. P -> C | CP; (A program is a sequence of clauses)
2. C -> F | R;  (A clause can either be a fact or a rule)
3. F -> H;      (A fact has a head but no body)
4. R -> H B;    (A rule has a head and a body)
5. H -> A;      (The head is a single atomic formula)
5. B -> A | AB; (A body is a sequence of atomic formulas)
6. A -> Pk T1 T2 ... Tk (An atomic formula is a k-ary predicate symbol followed by k terms)
7. Ti -> x | a | Fk T1 T2 ... Tk   (A term is either a variable, a constant, or a k-ary function symbol with k subterms)
8. G -> A | AG  (A goal is a sequence of atomic formulas)



## needed
1. define grammar as well as lexical tokens 
2. define the abstract syntax as OCaml datatype
3. Return Anstract syntax tree
